<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Choco Milky IPA Library V2</title>
<style>
:root{
  --bg:#0d0d0f; --card:rgba(28,28,32,0.85); --accent:#0a84ff; --text:#f5f5f7;
  --subtle:#9ca3af; --radius:18px; --shadow:0 8px 24px rgba(0,0,0,0.4);
  font-family:-apple-system,BlinkMacSystemFont,"SF Pro Display","Segoe UI",Roboto,Helvetica,Arial,sans-serif;
}
body{margin:0;background:var(--bg);color:var(--text);display:flex;flex-direction:column;min-height:100vh}
header{padding:28px 20px;text-align:center}
h1{margin:0;font-size:22px;font-weight:600}
#container{max-width:1100px;margin:0 auto;padding:12px 20px 40px}
#importRepo{width:100%;max-width:800px;margin:0 auto 18px;display:flex;gap:8px;justify-content:center}
#importRepo input{flex:1;padding:12px;border-radius:14px;border:1px solid rgba(255,255,255,0.06);background:rgba(255,255,255,0.03);color:var(--text);min-width:0}
#importRepo button{padding:12px 16px;border-radius:14px;background:var(--accent);color:#fff;border:0;cursor:pointer;font-weight:600}
#repos{display:flex;flex-direction:column;gap:12px;margin:18px auto;max-width:800px}
.repo-section-title{color:var(--subtle);font-weight:700;margin-top:8px;margin-bottom:6px}
.repo-card{display:flex;align-items:center;gap:12px;background:var(--card);padding:12px;border-radius:14px;box-shadow:var(--shadow);flex-wrap:wrap}
.repo-card img{width:48px;height:48px;border-radius:10px;object-fit:cover}
.repo-info{flex:1;min-width:180px}
.repo-name{font-weight:700}
.repo-desc{color:var(--subtle);font-size:13px;margin-top:4px}
.repo-actions{display:flex;gap:8px}
.repo-actions button{padding:8px 10px;border-radius:12px;border:0;background:var(--accent);color:#fff;cursor:pointer;font-weight:700}
.repo-actions button.copy{background:#444}
.repo-actions button.delete{background:#ff3b30}
#searchBar{display:none;justify-content:center;margin:14px auto;max-width:600px}
#searchInput{flex:1;padding:12px;border-radius:14px;border:1px solid rgba(255,255,255,0.06);background:rgba(255,255,255,0.03);color:var(--text)}
#apps{display:grid;grid-template-columns:repeat(auto-fill,minmax(220px,1fr));gap:18px;padding:18px;flex:1;max-width:1100px;margin:18px auto}
.card{background:var(--card);border-radius:16px;padding:16px;text-align:center;box-shadow:var(--shadow);display:flex;flex-direction:column;align-items:center}
.icon img{width:72px;height:72px;border-radius:14px;object-fit:cover;margin-bottom:12px}
.title{font-weight:700;margin-bottom:6px}
.subtitle{color:var(--subtle);font-size:13px;margin-bottom:8px}
.version{font-size:12px;color:#aaa;margin-bottom:12px}
.download{display:inline-block;padding:10px 14px;border-radius:14px;background:var(--accent);color:#fff;text-decoration:none;font-weight:700}
#backBtn{display:none;margin:8px auto;background:#333;color:#fff;border:0;padding:10px 16px;border-radius:14px;cursor:pointer;font-weight:700}
#toast{position:fixed;top:18px;left:50%;transform:translateX(-50%);background:rgba(0,0,0,0.85);color:#fff;padding:10px 16px;border-radius:12px;display:none;z-index:9999}
.loading-line{color:#999;text-align:center;padding:14px}
footer{text-align:center;color:var(--subtle);padding:18px 0;margin-top:auto}
@media (max-width:640px){.repo-card{flex-direction:column;align-items:flex-start}.repo-actions{width:100%;justify-content:flex-end}}
</style>
</head>
<body>
<header><h1>Choco Milky IPA Library V2</h1></header>
<div id="container">
  <div id="importRepo">
    <input id="importInput" type="url" placeholder="Paste repo URL here (.json, .php, or domain)">
    <button id="importBtn">Import</button>
  </div>

  <div id="repos"></div>

  <button id="backBtn">← Back to Libraries</button>

  <div id="searchBar"><input id="searchInput" type="text" placeholder="Search apps…"></div>

  <div id="apps"></div>
</div>

<div id="toast"></div>
<footer>© 2025 Choco Milky IPA Library V2</footer>

<script>
/* --------------------- Default repo list (as requested) --------------------- */
const defaultRepos = [
  "https://raw.githubusercontent.com/WhySooooFurious/Ultimate-Sideloading-Guide/refs/heads/main/raw-files/app-repo.json",
  "https://esign.yyyue.xyz/app.json",
  "https://raw.githubusercontent.com/vizunchik/AltStoreRus/master/apps.json",
  "https://raw.githubusercontent.com/vizunchik/AltStoreRus/master/apps.json",
  "https://qnblackcat.github.io/AltStore/apps.json",
  "https://randomblock1.com/altstore/apps.json",
  "https://wuxu1.github.io/wuxu-complete-plus.json",
  "https://wuxu1.github.io/wuxu-complete.json",
  "https://ipa.cypwn.xyz/cypwn.json",
  "https://driftywinds.github.io/AltStore/apps.json",
  "https://hann8n.github.io/JackCracks/MovieboxPro.json",
  "https://raw.githubusercontent.com/TheNightmanCodeth/chromium-ios/master/altstore-source.json",
  "https://repository.apptesters.org/",
  "https://aio.yippee.rip/repo.json",
  "https://community-apps.sidestore.io/sidecommunity.json",
  "https://raw.githubusercontent.com/arichornloverALT/arichornloveralt.github.io/main/apps2.json",
  "https://raw.githubusercontent.com/arichornloveralt/arichornloveralt.github.io/main/apps.json",
  "https://raw.githubusercontent.com/lo-cafe/winston-altstore/main/apps.json",
  "https://qingsongqian.github.io/all.html",
  "https://tiny.one/SpotC",
  "https://theodyssey.dev/altstore/odysseysource.json",
  "https://provenance-emu.com/apps.json",
  "https://ish.app/altstore.json",
  "https://raw.githubusercontent.com/Balackburn/YTLitePlusAltstore/main/apps.json",
  "https://raw.githubusercontent.com/whoeevee/EeveeSpotify/swift/repo.json",
  "https://altstore.oatmealdome.me/",
  "https://raw.githubusercontent.com/driftywinds/driftywinds.github.io/master/AltStore/apps.json",
  "https://alts.lao.sb/",
  "https://xitrix.github.io/iTorrent/AltStore.json",
  "https://driftywinds.github.io/repos/esign.json",
  "https://github.com/khcrysalis/Feather/raw/main/app-repo.json",
  "https://apps.nabzclan.vip/repos/altstore.php",
  "https://flyinghead.github.io/flycast-builds/altstore.json",
  "https://altstore.oatmealdome.me/",
  "https://alt.crystall1ne.dev/",
  "https://apps.sidestore.io/",
  "https://repos.yattee.stream/alt/apps.json",
  "https://alt.thatstel.la/",
  // include repo.ethsign.fyi explicitly
  "https://repo.ethsign.fyi"
];
/* -------------------------------------------------------------------------- */

const reposArea = document.getElementById('repos');
const appsArea = document.getElementById('apps');
const importRepoBox = document.getElementById('importRepo');
const importInput = document.getElementById('importInput');
const importBtn = document.getElementById('importBtn');
const backBtn = document.getElementById('backBtn');
const searchBar = document.getElementById('searchBar');
const searchInput = document.getElementById('searchInput');
const toast = document.getElementById('toast');

let currentApps = [];
let userRepos = JSON.parse(localStorage.getItem('userRepos') || '[]');
let viewingRepoUrl = null;

/* helper: show toast */
function showToast(msg, ms=1500){
  toast.textContent = msg;
  toast.style.display = 'block';
  clearTimeout(toast._t);
  toast._t = setTimeout(()=> toast.style.display='none', ms);
}

/* persistence & checks */
function saveUserRepos(){ localStorage.setItem('userRepos', JSON.stringify(userRepos)); }
function isAlreadyAdded(url){ return userRepos.includes(url) || defaultRepos.includes(url); }

/* fetch with timeout helper */
function fetchWithTimeout(resource, options = {}) {
  const { timeout = 8000 } = options;
  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), timeout);
  return fetch(resource, { ...options, signal: controller.signal })
    .finally(() => clearTimeout(id));
}

/* Try a list of candidate URLs (direct and common suffixes), then try proxies.
   If any returns valid JSON, resolve with the parsed JSON. Otherwise throw.
*/
async function tryFetchJson(url) {
  const candidates = new Set();

  // normalize
  const base = url.trim();

  // direct
  candidates.add(base);

  // common suffixes appended
  const suffixes = ['/apps.json','/app.json','/repo.json','/altstore.json','/index.json','/packages.json','/app-repo.json','/alt.json'];
  for (const s of suffixes) candidates.add(base.replace(/\/+$/,'') + s);

  // if url ends with .php/.html/.htm, try same with .json
  if (base.match(/\.(php|html|htm)$/i)) candidates.add(base.replace(/\.(php|html|htm)$/i, '.json'));

  // If url is domain root without protocol (unlikely) user pasted: ensure http/https candidates
  if (!base.startsWith('http://') && !base.startsWith('https://')) {
    candidates.add('https://' + base);
    candidates.add('http://' + base);
  }

  // try direct candidates first with reasonable timeout, limited concurrency
  const tryList = Array.from(candidates);

  // helper to test a single candidate
  async function testCandidate(c) {
    try {
      const r = await fetchWithTimeout(c, { timeout: 7000 });
      if (!r.ok) throw new Error('HTTP ' + r.status);
      const txt = await r.text();
      try {
        const parsed = JSON.parse(txt);
        return parsed;
      } catch(e) {
        // not JSON
        throw new Error('not-json');
      }
    } catch(e) {
      throw e;
    }
  }

  // test direct candidates sequentially (small number)
  for (const c of tryList) {
    try {
      const parsed = await testCandidate(c);
      return parsed;
    } catch(e) {
      // continue to proxies if direct attempts fail
    }
  }

  // proxies fallback (best-effort). Note: public proxies may be rate-limited.
  const proxies = [
    u => 'https://api.allorigins.win/raw?url=' + encodeURIComponent(u),
    u => 'https://r.jina.ai/http://' + u.replace(/^https?:\/\//,''),
    u => 'https://corsproxy.io/?' + encodeURIComponent(u),
    u => 'https://thingproxy.freeboard.io/fetch/' + u
  ];

  for (const c of tryList) {
    for (const p of proxies) {
      const proxyUrl = p(c);
      try {
        const r = await fetchWithTimeout(proxyUrl, { timeout: 9000 });
        if (!r.ok) throw new Error('HTTP ' + r.status);
        const txt = await r.text();
        try {
          const parsed = JSON.parse(txt);
          return parsed;
        } catch(e) {
          // not JSON via proxy
        }
      } catch(e) {
        // continue
      }
    }
  }

  throw new Error('No valid JSON from candidates or proxies');
}

/* Concurrency-limited builder:
   - avoids starting 40 fetches at once (some repos can be slow)
   - returns card HTML for valid repos only
*/
async function buildRepoCard(url, isUser) {
  try {
    const data = await tryFetchJson(url);
    // require either name/description or apps array
    const hasApps = Array.isArray(data.apps) && data.apps.length > 0;
    const firstApp = hasApps ? data.apps[0] : {};
    const icon = data.iconURL || firstApp.iconURL || '';
    const name = (data.name || firstApp.name || '').trim();
    const desc = (data.description || firstApp.subtitle || firstApp.localizedDescription || '').trim();
    // if neither name nor apps, skip
    if (!name && !hasApps) throw new Error('missing metadata');
    const esc = s => (s||'').replace(/'/g,"\\'");
    return `
      <div class="repo-card" data-url='${esc(url)}'>
        <img src="${esc(icon)}" alt="">
        <div class="repo-info">
          <div class="repo-name">${esc(name || (hasApps? firstApp.name : ''))}</div>
          <div class="repo-desc">${esc(desc || (hasApps? firstApp.subtitle||firstApp.localizedDescription : ''))}</div>
        </div>
        <div class="repo-actions">
          <button class="openBtn" data-url='${esc(url)}'>Open</button>
          <button class="copyBtn" data-url='${esc(url)}'>Copy URL</button>
          ${isUser?`<button class="deleteBtn" data-url='${esc(url)}'>Delete</button>`:''}
        </div>
      </div>
    `;
  } catch(e) {
    // silently skip invalid/broken repos
    console.warn('Repo skipped:', url, e.message || e);
    return '';
  }
}

/* Render repos with controlled concurrency */
async function loadRepos() {
  reposArea.innerHTML = `<div class="loading-line">Loading libraries…</div>`;
  const all = [...userRepos, ...defaultRepos]; // user first so they show on top; we label sections later
  const results = [];
  const concurrency = 6;
  let i = 0;

  async function worker() {
    while (i < all.length) {
      const idx = i++;
      const url = all[idx];
      const isUser = idx < userRepos.length;
      const html = await buildRepoCard(url, isUser);
      results[idx] = { url, isUser, html };
    }
  }

  // start workers
  const workers = Array.from({length:concurrency}, () => worker());
  await Promise.all(workers);

  // group: user repos then default
  let out = '';
  // user section
  const userHtml = results.slice(0, userRepos.length).map(r => r ? r.html : '').filter(Boolean).join('');
  if (userHtml) out += `<div class="repo-section-title">User Repos</div>` + userHtml;
  // default section
  const defHtml = results.slice(userRepos.length).map(r => r ? r.html : '').filter(Boolean).join('');
  if (defHtml) out += `<div class="repo-section-title">Default Repos</div>` + defHtml;

  reposArea.innerHTML = out || `<div class="loading-line">No libraries loaded.</div>`;
  attachRepoHandlers();
}

/* attach handlers for the cards */
function attachRepoHandlers() {
  document.querySelectorAll('.openBtn').forEach(btn => btn.onclick = () => openRepo(btn.dataset.url));
  document.querySelectorAll('.copyBtn').forEach(btn => {
    btn.onclick = async () => {
      try { await navigator.clipboard.writeText(btn.dataset.url); showToast('Copied URL'); }
      catch (e) { alert('Copy failed'); }
    };
  });
  document.querySelectorAll('.deleteBtn').forEach(btn => btn.onclick = () => {
    const url = btn.dataset.url;
    if (!confirm('Are you sure you want to delete this repo?')) return;
    userRepos = userRepos.filter(r => r !== url);
    saveUserRepos();
    showToast('Repo deleted');
    loadRepos();
  });
}

/* open repo: hide list & import, show search/back, load apps */
async function openRepo(url) {
  viewingRepoUrl = url;
  window.scrollTo({top:0,behavior:'auto'});
  reposArea.style.display = 'none';
  importRepoBox.style.display = 'none';
  backBtn.style.display = 'block';
  searchBar.style.display = 'flex';
  appsArea.innerHTML = `<div class="loading-line">Loading apps…</div>`;
  try {
    const data = await tryFetchJson(url);
    currentApps = data.apps || [];
    renderApps(currentApps);
  } catch(e) {
    appsArea.innerHTML = `<div class="loading-line">Error loading repo.</div>`;
    currentApps = [];
  }
}

/* render apps */
function renderApps(apps) {
  if (!apps || apps.length === 0) {
    appsArea.innerHTML = `<div class="loading-line">No apps found.</div>`;
    return;
  }
  appsArea.innerHTML = '';
  apps.forEach(app => {
    const latest = (app.versions && app.versions.length) ? app.versions[0] : {};
    const version = latest.version || app.version || '';
    const desc = app.subtitle || app.localizedDescription || latest.localizedDescription || '';
    const downloadURL = app.downloadURL || latest.downloadURL || '#';
    const card = document.createElement('div');
    card.className = 'card';
    card.innerHTML = `
      <div class="icon"><img src="${app.iconURL||''}" alt=""></div>
      <div class="title">${app.name||''}</div>
      <div class="subtitle">${desc}</div>
      <div class="version">${version ? 'Version ' + version : ''}</div>
      <a class="download" href="${downloadURL}" target="_blank" rel="noopener">Download</a>
    `;
    appsArea.appendChild(card);
  });
}

/* back button */
backBtn.addEventListener('click', () => {
  viewingRepoUrl = null;
  appsArea.innerHTML = '';
  reposArea.style.display = '';
  importRepoBox.style.display = '';
  backBtn.style.display = 'none';
  searchBar.style.display = 'none';
  window.scrollTo({top:0,behavior:'auto'});
});

/* search */
searchInput.addEventListener('input', () => {
  const q = searchInput.value.toLowerCase();
  const filtered = (currentApps || []).filter(app => {
    const latest = (app.versions && app.versions.length) ? app.versions[0] : {};
    const fields = [app.name, app.subtitle, app.localizedDescription, app.developerName, app.bundleIdentifier, latest.localizedDescription];
    return fields.some(f => f && f.toLowerCase().includes(q));
  });
  renderApps(filtered);
});

/* import handler: validate, save, auto-open */
importBtn.addEventListener('click', async () => {
  const url = importInput.value.trim();
  if (!url) return showToast('Paste a valid repo URL');
  if (isAlreadyAdded(url)) return showToast('Repo already added');
  showToast('Validating repo...');
  try {
    await tryFetchJson(url); // validate
    userRepos.push(url);
    saveUserRepos();
    importInput.value = '';
    await loadRepos();
    showToast('Imported — opening...');
    openRepo(url);
  } catch(e) {
    console.error('Import failed', e);
    showToast('Failed to import (invalid JSON or unreachable)');
  }
});

/* persistence */
function saveUserRepos(){ localStorage.setItem('userRepos', JSON.stringify(userRepos)); }

/* init */
loadRepos();
</script>
</body>
</html>
